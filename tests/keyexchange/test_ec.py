from gmpy2 import mpz

from tls.keyexchange.ec import EcField, EcPoint


def test_mod_inv():
    field = EcField(mpz(2), mpz(1), mpz(17))
    assert field.mod_inv(mpz(2)) == 9


def test_included():
    field = EcField(mpz(0), mpz(1), mpz(17))
    assert field.included(2, 3)


def test_not_included():
    field = EcField(mpz(2), mpz(1), mpz(17))
    assert not field.included(2, 3)


def test_ec_point_equality():
    f = EcField(mpz(2), mpz(2), mpz(17))
    assert EcPoint(5, 1, f) == EcPoint(5, 1, f)


def test_ec_point_add_self():
    f = EcField(mpz(2), mpz(2), mpz(17))
    point = EcPoint(5, 1, f)
    assert point + point == EcPoint(6, 3, f)


def test_multiply():
    f = EcField(mpz(2), mpz(2), mpz(17))
    point = EcPoint(5, 1, f)
    assert point * 2 == EcPoint(6, 3, f)
    assert 2 * point == EcPoint(6, 3, f)


def test_public_key_exchange_get_secret_key():
    f = EcField(mpz(2), mpz(2), mpz(17))
    point = EcPoint(5, 1, f)
    x_a = point * 5
    x_b = point * 13
    assert x_a * 13 == x_b * 5


def test_secp_256k1_vectors():
    f = EcField(mpz(0), mpz(7), mpz('0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F'))
    point = EcPoint(
        mpz(0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798),
        mpz(0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8),
        f)
    test_values = [
        {"k": 1,
         "x": "0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798",
         "y": "0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8"},
        {"k": 2,
         "x": "0xC6047F9441ED7D6D3045406E95C07CD85C778E4B8CEF3CA7ABAC09B95C709EE5",
         "y": "0x1AE168FEA63DC339A3C58419466CEAEEF7F632653266D0E1236431A950CFE52A"},
        {"k": 3,
         "x": "0xF9308A019258C31049344F85F89D5229B531C845836F99B08601F113BCE036F9",
         "y": "0x388F7B0F632DE8140FE337E62A37F3566500A99934C2231B6CB9FD7584B8E672"},
        {"k": 4,
         "x": "0xE493DBF1C10D80F3581E4904930B1404CC6C13900EE0758474FA94ABE8C4CD13",
         "y": "0x51ED993EA0D455B75642E2098EA51448D967AE33BFBDFE40CFE97BDC47739922"},
        {"k": 5,
         "x": "0x2F8BDE4D1A07209355B4A7250A5C5128E88B84BDDC619AB7CBA8D569B240EFE4",
         "y": "0xD8AC222636E5E3D6D4DBA9DDA6C9C426F788271BAB0D6840DCA87D3AA6AC62D6"},
        {"k": 6,
         "x": "0xFFF97BD5755EEEA420453A14355235D382F6472F8568A18B2F057A1460297556",
         "y": "0xAE12777AACFBB620F3BE96017F45C560DE80F0F6518FE4A03C870C36B075F297"},
        {"k": 7,
         "x": "0x5CBDF0646E5DB4EAA398F365F2EA7A0E3D419B7E0330E39CE92BDDEDCAC4F9BC",
         "y": "0x6AEBCA40BA255960A3178D6D861A54DBA813D0B813FDE7B5A5082628087264DA"},
        {"k": 8,
         "x": "0x2F01E5E15CCA351DAFF3843FB70F3C2F0A1BDD05E5AF888A67784EF3E10A2A01",
         "y": "0x5C4DA8A741539949293D082A132D13B4C2E213D6BA5B7617B5DA2CB76CBDE904"},
        {"k": 9,
         "x": "0xACD484E2F0C7F65309AD178A9F559ABDE09796974C57E714C35F110DFC27CCBE",
         "y": "0xCC338921B0A7D9FD64380971763B61E9ADD888A4375F8E0F05CC262AC64F9C37"},
        {"k": 10,
         "x": "0xA0434D9E47F3C86235477C7B1AE6AE5D3442D49B1943C2B752A68E2A47E247C7",
         "y": "0x893ABA425419BC27A3B6C7E693A24C696F794C2ED877A1593CBEE53B037368D7"},
        {"k": 11,
         "x": "0x774AE7F858A9411E5EF4246B70C65AAC5649980BE5C17891BBEC17895DA008CB",
         "y": "0xD984A032EB6B5E190243DD56D7B7B365372DB1E2DFF9D6A8301D74C9C953C61B"},
        {"k": 12,
         "x": "0xD01115D548E7561B15C38F004D734633687CF4419620095BC5B0F47070AFE85A",
         "y": "0xA9F34FFDC815E0D7A8B64537E17BD81579238C5DD9A86D526B051B13F4062327"},
        {"k": 13,
         "x": "0xF28773C2D975288BC7D1D205C3748651B075FBC6610E58CDDEEDDF8F19405AA8",
         "y": "0x0AB0902E8D880A89758212EB65CDAF473A1A06DA521FA91F29B5CB52DB03ED81"},
        {"k": 14,
         "x": "0x499FDF9E895E719CFD64E67F07D38E3226AA7B63678949E6E49B241A60E823E4",
         "y": "0xCAC2F6C4B54E855190F044E4A7B3D464464279C27A3F95BCC65F40D403A13F5B"},
        {"k": 15,
         "x": "0xD7924D4F7D43EA965A465AE3095FF41131E5946F3C85F79E44ADBCF8E27E080E",
         "y": "0x581E2872A86C72A683842EC228CC6DEFEA40AF2BD896D3A5C504DC9FF6A26B58"},
        {"k": 16,
         "x": "0xE60FCE93B59E9EC53011AABC21C23E97B2A31369B87A5AE9C44EE89E2A6DEC0A",
         "y": "0xF7E3507399E595929DB99F34F57937101296891E44D23F0BE1F32CCE69616821"},
        {"k": 17,
         "x": "0xDEFDEA4CDB677750A420FEE807EACF21EB9898AE79B9768766E4FAA04A2D4A34",
         "y": "0x4211AB0694635168E997B0EAD2A93DAECED1F4A04A95C0F6CFB199F69E56EB77"},
        {"k": 18,
         "x": "0x5601570CB47F238D2B0286DB4A990FA0F3BA28D1A319F5E7CF55C2A2444DA7CC",
         "y": "0xC136C1DC0CBEB930E9E298043589351D81D8E0BC736AE2A1F5192E5E8B061D58"},
        {"k": 19,
         "x": "0x2B4EA0A797A443D293EF5CFF444F4979F06ACFEBD7E86D277475656138385B6C",
         "y": "0x85E89BC037945D93B343083B5A1C86131A01F60C50269763B570C854E5C09B7A"},
        {"k": 20,
         "x": "0x4CE119C96E2FA357200B559B2F7DD5A5F02D5290AFF74B03F3E471B273211C97",
         "y": "0x12BA26DCB10EC1625DA61FA10A844C676162948271D96967450288EE9233DC3A"}]

    for value in test_values:
        cur_point = point * value["k"]
        assert cur_point.x == mpz(value["x"])
        assert cur_point.y == mpz(value["y"])
